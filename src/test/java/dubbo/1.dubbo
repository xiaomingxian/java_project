特性：
    面向接口代理的高性能RPC调用：基于代理的远程调用能力，服务以接口为粒度，屏蔽调用的细节
    服务自动注册与发现：支持多种注册中心服务，服务实例上下线实时感知
    运行期间流量调度：内置条件，脚本等路由策略，通过配置不同的路由规则，轻松实现灰度发布[多个服务[同一服务]的部分更新]，同机房优先等功能
    智能负载均衡：内置多种负载均衡策略，智能感知下游节点健康状况，显著减少调用延迟，提高系统吞吐量
    高度可扩展能力：遵循微内核+插件设计原则，所有能力如 Protocol,Transport,Serialization被设计为扩展点，平等对待内置实现和第三方实现
    可视化的服务治理与运维：提供丰富服务治理，运维工具：随时查询服务元数据，服务健康状态及调用统计，实时下发路由策略，调整配置参数

=========================== 设计架构
=========================== 支持的协议
dubbo,rmi,hessian,http,webservice,thrift,memcached,redis,rest 9个协议，默认使用dubbo协

为什么使用dubbo协议[高性能rpc:tps平均值]
    dubbo2.0采用单一长链接和NIO异步传输，Hessian2.dubbo 二进制序列化，
    适用于小数量大并发的服务调用， [小数量：tps平均值(每秒完成事物的值)在1k的时候效率很高，在50k的时候效率很低]
    以及服务消费机器远大于服务提供者机器数的情况 [带宽得到充分利用]
    dubbo主要用于服务间rpc通信，小数量大并发的场景刚好适合[小数据量：官方建议100k]
    适用于服务通信-不适用与文件上传等

    64位 1pojo 16byte

=========================== 负载均衡
1 随机[可加权重][默认] Random LoadBalance
2 轮询[可加权重][服务性能好的可设置权重大一些]      RoundRobin LoadBalance
3 最少活跃调用数[能者多劳] LeastActive LoadBalance
    [客户端将请求分发给服务端，客户端存在一个计数器，请求发过去的时候假设一个请求计数+1，
    服务端处理掉一个请求计数就-1，在第二轮分配任务的时候就给计数小的服务端多分一些(服务能力强)]
4 一致性Hash [相同参数的请求总是发送到同一个提供者]
    一致性hash: https://www.cnblogs.com/lpfuture/p/5796398.html

=========================== 容错方案
1 失败自动切换，自动重试其他服务器             [Failover Cluster]
2 快速失败，立即报错，直发一次调用             [FailFast Cluster]
3 失败安全，出现异常时，直接忽略              [FailSafe Cluster]
4 失败自动恢复，记录失败请求，定时重发         [Failback Cluster]
5 并行调用多个服务器，只要有一个成功返回即可    [Froking Cluster]
6 广播调用所有服务者，任意一个报错则报错       [Broadcast Cluster]
