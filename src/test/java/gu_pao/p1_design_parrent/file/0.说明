设计模式：http://c.biancheng.net/view/1333.html

设计原则：
    1 开闭原则(ocp):对扩展开放，对修改关闭
    2 单一职责原则：一个类/接口只负责一个/类功能(只做一件事)
    3 依赖倒置原则：程序要依赖于抽象接口，不要依赖于具体实现(eg:面向接口编程)
    4 接口隔离原则：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。(eg:b 实现了 a,c 想使用 a 的功能就单独实现 a,反例：a通过b来使用a)
    5 迪米特原则(最少知道原则)()：软件实体之间应尽可能少的发生相互作用(降低类耦合[需要联系的话，通过中介类来做(可能会产生过多的中介类)])每一个软件单位对其他的单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位。
    6 里氏替换原则：子类可以扩展父类的功能，但是不能修改父类的方法
    7 合成复用原则(组合/聚合复用原则)：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系(白箱复用[父类对子类透明])来实现

spring中用到的设计模式：
    工厂模式：BeanFactory
    装饰器模式：BeanWrapper
    代理模式：AopProxy
    单例模式：ApplicationContext
    委派模式：DispatcherServlet
    策略模式：HandlerMapping
    适配器模式：HandlerAdapter
    模版方法模式：JdbcTemplate
    观察者模式：ContextLoaderListener
    ...


