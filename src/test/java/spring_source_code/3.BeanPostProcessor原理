
BeanPostProcessor工作原理

            //得到容器中所有的 BeanPostProcessor 挨个执行

            public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory implements AutowireCapableBeanFactory {
            //initializeBean之前调用-进行属性赋值
           populateBean(...)
            //初始化
            protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) {
            ...
            Object wrappedBean = bean;
            if (mbd == null || !mbd.isSynthetic()) {
                wrappedBean = this.applyBeanPostProcessorsBeforeInitialization(bean, beanName);
            }

            try {
                this.invokeInitMethods(beanName, wrappedBean, mbd);
            } catch (Throwable var6) {
                throw new BeanCreationException(mbd != null ? mbd.getResourceDescription() : null, beanName, "Invocation of init method failed", var6);
            }

            if (mbd == null || !mbd.isSynthetic()) {
                wrappedBean = this.applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);

            ...
            //前置通知
              public Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) throws BeansException {
                    Object result = existingBean;
                    Iterator var4 = this.getBeanPostProcessors().iterator();

                    do {
                        if (!var4.hasNext()) {
                            return result;
                        }

                        BeanPostProcessor beanProcessor = (BeanPostProcessor)var4.next();
                        result = beanProcessor.postProcessBeforeInitialization(result, beanName);
                    } while(result != null);

                    return result;//如果为null就不执行以上代码块
                }
            //后置通知
                public Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) throws BeansException {
                    Object result = existingBean;
                    Iterator var4 = this.getBeanPostProcessors().iterator();

                    do {
                        if (!var4.hasNext()) {
                            return result;
                        }

                        BeanPostProcessor beanProcessor = (BeanPostProcessor)var4.next();
                        result = beanProcessor.postProcessAfterInitialization(result, beanName);
                    } while(result != null);

                    return result;
                }

