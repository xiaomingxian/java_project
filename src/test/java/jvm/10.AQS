AbstractQueuedSynchronizer      https://www.cnblogs.com/waterystone/p/4920797.html
state的默认值应该是0
[FIFO先进先出][CLH队列]
锁的实现框架

线程.join()//守护线程-等此线程执行完毕后[线程数组循环 线程.join() 等待所有线程结束]

sychronized 1.5之前不可重入
jdk1.6 sychronized锁升级的过程[默认打开偏向锁][sychronized的优化过程]
    偏向锁[偏向第一个线程,如果有其他线程征用的话就升级]-->轻量级锁[一般自旋锁(10次)]-->重量级锁[sychronized悲观]


ReentryLock 底层是AQS

sychronized加锁是 JVM要与操作系统打交道[os][调用操作系统的底层进行加锁]
    用户态[jvm]与Kernel切换耗时[os][重量级的原因-1.5后优化没有那么重 锁升级的过程(偏向锁-->轻量-->重量)]


1.5之后增加了很多ConcurrentLock的内容 [只用在jvm内部就能实现锁的效果 无需os底层 效率会提高]


CAS  现代CPU支持CAS指令[栅栏] 内存偏移量上做操作 [适用情况：阻塞时间短自旋时间短(自旋时间长也消耗CPU)][阻塞时间长->synchronized比较合适]


CounDownLunch  的内部实现类也是用了AQS  用的是共享锁[多个线程都可以持有这个锁]

============================== AQS中的独占锁与共享锁  =================================
isHeldExclusively()：该线程是否正在独占资源。只有用到condition才需要去实现它。
tryAcquire(int)：独占方式。尝试获取资源，成功则返回true，失败则返回false。
tryRelease(int)：独占方式。尝试释放资源，成功则返回true，失败则返回false。
tryAcquireShared(int)：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。
tryReleaseShared(int)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。

独占锁 ：ReentrantLock...
    以ReentrantLock为例，state初始化为0，表示未锁定状态。A线程lock()时，会调用tryAcquire()独占该锁并将state+1。
    此后，其他线程再tryAcquire()时就会失败，直到A线程unlock()到state=0（即释放锁）为止，其它线程才有机会获取该锁。
    当然，释放锁之前，A线程自己是可以重复获取此锁的（state会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证state是能回到零态的。

共享锁：CountDownLatch...
    再以CountDownLatch以例，任务分为N个子线程去执行，state也初始化为N（注意N要与线程个数一致）。这N个子线程是并行执行的，
    每个子线程执行完后countDown()一次，state会CAS减1。等到所有子线程都执行完后(即state=0)，
    会unpark()主调用线程，然后主调用线程就会从await()函数返回，继续后余动作。