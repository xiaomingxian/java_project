场景1:excel,报表等大量大对象  导致内存占满 触发fullGC 内存大「硬件」 导致时间长[20-30s]
    解决方案：部署多个web容器，每个内存分配4g(将原来的大内存分小)   nigx+tomcat集群(单机多个tomcat)


场景2:机器内存较小2G  程序中有NIO操作，使用的是堆外内存 他自己不会回收 导致内存溢出
    解决方案：调整直接内存「对外内存」大小
    可以通过 -XX:MaxDirectMemorySize 参数来设置最大可用直接内存，如果启动时未设置则默认为最大堆内存大小，即与 -Xmx 相同。
            即假如最大堆内存为1G，则默认直接内存也为1G，那么 JVM 最大需要的内存大小为2G多一些。
            当直接内存达到最大限制时就会触发GC，如果回收失败则会引起OutOfMemoryError。


场景3:参考jvm调优案例3.jpg
    描述：互联网场景，智能设备 语音助手 中间的通过两个Java服务 进行通信   信息量过多导致jvm处理不过来而崩溃 现象 connection reset -->连接被重置[连接中断]
    解决方案：增加消息中间件 生产消费模式 缓解jvm压力