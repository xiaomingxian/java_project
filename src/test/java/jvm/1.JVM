jvm:java虚拟机
    jvm内存：栈stack ，堆heap，方法区method area[方法区也在堆里]
        栈：
            1.栈描述的是方法执行的内存模型，每个方法调用都会创建一个栈桢(存储局部变量，操作数，方法出口)
                ----如果方法里再调用方法会再为方法开辟空间，调用万就销毁，如果所有方法都调用完，栈就销毁
            2.jvm为每个线程创建一个栈，用于存放该线程执行方法的信息(实际参数，执行变量等)
            3.栈属于线程私有，多个线程不能共享
            4.栈的存储特性：先进后出
            5.栈是由系统分配，速度快，栈是一个连续的内存空间
        堆：
            1.用于存储创建好的对象和数组「数组也是对象」
            2.jvm只有一个堆，被所有线程共享
            3.堆是一个不连续的内存空间，分配灵活，速度慢

        方法区「又叫静态区」:
            1.jvm只有一个方法区
            2.方法区实际上也是堆，只用于存储类，常量相关信息
            3.用于存放程序中永远不变或唯一的内容「类信息，class对象，静态变量，字符串常量等」
----------------------  jvm 图形化监控工具  ------------------
jdk/bin/jconsole.exe  命令行输入 jconsole 实际程序包在 lib/tools.jar
jps 列出所有进程

---------------------- jvm内存管理 ---------------------------
1.程序计数器：
    是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器
    处于线程独占区
    如果线程执行的是java方法，这个计数器指示的是正在执行的虚拟字节码指令的地址
    如果执行的是native方法，这个计数器的值为undefined
    此区域是jvm规范中唯一没有规定任何 OutOfMemorryError情况的区域：原因：它由jvm维护，不需要开发者操作

2.jvm栈【虚拟机栈】
    java虚拟机栈 描述的是Java方法执行的动态内存模型
    栈桢：
        每个方法执行都会创建一个栈桢，声明周期：方法创建-完成
        用于存储局部变量表，操作数栈，动态链接，方法出口等
    局部变量表：
        存放编译期可知的各种基本类型，引用类型，returnAddress类型
        局部变量表的内存空间在编译期完成分配，当进入一个方法时，这个方法需要的帧是固定的，在方法运行期间是不会改变局部变量表的大小
    大小：
        stackOverflowError 栈内存溢出
        OutOfMerroyError   如果不限制栈的大小，他会一直申请内存，知道超出机器内存-->内存溢出
3.本地方法栈：
    虚拟机栈为虚拟机执行Java方法服务
    本地方法栈为虚拟机执行native方法服务
4.堆：「jvm管理的最大内存区域」
    存储对象实例「主要区域，也可以在其他区域分配-->优化使用」
    垃圾收集器管理的主要区域【回收效率最高的区域：堆】
    新生代，老年代，Eden空间
    从内存分配角度：堆中也会划分出许多私有的线程缓冲区
    修改堆内存大小：-Xmx -Xms
5.方法区：
    存储虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等
        类信息[类的版本，字段，方法，接口]
    方法区和永久代【jvm中不等同，其他虚拟机中可以等同：eg:hotspot中没有方法区】
    垃圾回收在方法区的行为「很少在此处回收，效率低-->回收量小，回收哪些:常量池，对象类型的卸载...」

-----特殊强调
1.运行时常量池「属于方法区」
    内容：存放编译期生成的各种字面量和符号引用
    常量池申请不到内存也会 OOM

    直接内存：
        jdk1.4 弥补IO性能的NIO
            基于缓冲区，使用native函数  分配堆外内存，通过存储在堆中的developBuffer引用进行操作 不受jvm内存制约「但是会受到当前操作系统的物理内存的制约」

---------  对象创建
1.内存空间的分配：
    分配方式：
        1.空闲列表：虚拟机维护了一张表「记录哪些空间使用了，哪些未使用」
        2.指针碰撞：指针想空暇的区域移动 移动的范围为对象的大小
    采用哪种分配方式取决于垃圾回收是否有压缩整理的功能：有1-->将内存区域规整，哪些使用哪些未使用；否则2
2.线程安全问题
    空闲列表为例：分配空间时同时看中同一块未选区域
    指针碰撞为例：同时移动指针

    解决：
        1.加锁，使同步 效率低
        2.本地线程分配缓冲-->在堆中为每个线程分配各自的区域「改善同步锁的效率问题」
3.初始化默认[get/set方法获取默认值]
    初始化默认信息，
    对象头信息：是哪个类的实例，如何才能找到类的元数据信息，对象的哈希码...

    此时java对象在虚拟机中已经产生：内存分配好了，初始化信息也好了
    对于开发者还没有创建完成-->执行构造方法「调用对象的<init信息>」
4.执行构造方法[调用对象的<init>方法]

----------------对象的结构
1.Header(对象头)
    自身运行时数据【别名markword】[根据虚拟机不同分别占32位和64位]
        哈希值，GC分代年龄[为分代算法准备]，锁状态标志，线程持有的锁，偏向线程ID,偏向时间戳
    类指针类型【不是所有的虚拟机都有，数组中还有记录长度的指针】
        指向源数据的指针，虚拟机通过他来确定是哪个对象
2.InstanceData【实例数据】
    hotspot中根据 类型长度来划分 long/double放在一起  shorts/chars 放在一起...
    父类字段在子类字段前面
3.Padding【占位符】
    hotspot中要求对象的大小必须是8字节的整数倍 而对象头正好是8字节的整数倍  32/64
    如果对象头没对齐时需要此类型来占位
----------------对象的访问
1.使用句柄  引用指向句柄池中的句柄 句柄在指向实例池中的实例地址 实例中有个指针指向方法区中的对象类型数据区域
     引用地址不需修改
2.直接指针  引用指向                     实例池中的实例地址 实例中有个指针指向方法区中的对象类型数据区域
     直接指向效率相对较高，较少性能开销

hotspot采用直接指针





