跟节点   树根
双亲节点  上一节点「母が父」
子节点
路径
度       子节点/子树 个数
权       节点的值
叶子节点  没有子节点的节点
子树      以子节点作为跟节点的树
层        eg:　跟节点的层为1  它的子节点为2 依次为 3,4...
树的高度   最大层数
森林      多个独立的树

#------------------- 二叉树 -----------------------
二叉树：子节点不超过2
满二叉树：所有叶子节点都在最后一层 节点总数为：2^n-1 [n为层数]
完全二叉树：所有叶子节点都在最后一层或者倒数第二层，且最后一层的节点在左边连续，倒数第二层的节点[右边的节点]在右边连续
          换句话说：  完全二叉树从根结点到倒数第二层满足完美二叉树
            任何数组都可以看作是个完全二叉树 参考 5.顺序存储二叉树特性.jpg
----存储结构：链式存储，顺序存储

堆结构：可以看作是个完全二叉树  【所有的父节点大于子节点：大顶堆「生序」】【所有的父节点小于子节点：小顶堆「降序」】

线索二叉树：一个节点的前一个节点叫前驱节点，后一个节点叫后驱节点

赫夫曼树：最优二叉树【树的带权路径最短】

二叉查找[搜索,排序]树BST[如果是一个空树也认为它是二叉排序树]：  对于二叉树中的任何一个非叶子节点，左叶子节点<次节点<右叶子节点

AVL树【平衡二叉树】(也是二叉查找树)：任何一棵树[包括子树]的左子树和右子树的高度差不超过1

----以上的树数据结构 应用场景：内存-->因为数据量小    内存：作为cpu的告诉缓存

----B树：文件系统 数据库系统
    B树的阶：eg 2-3树的阶为 3    2-3-4树的阶为 4
    B树特例：2-3树  2-3-4树

    B+树的叶子节点存储信息 非叶子节点存储 索引信息 叶子节点的最右指针指向相信的叶子节点  所有叶子节点组成了一个有序链表
#------------------- 二叉树遍历 -----------------------
前序遍历：跟节点  左节点  右节点
中序遍历：左节点  跟节点  右节点
后续遍历：左节点  右节点  跟节点