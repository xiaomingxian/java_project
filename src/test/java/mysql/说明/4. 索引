官方：索引是为了帮助mysql高效获取数据的数据结构  【排好序的快速查找数据结构】[排序+快速查找]
影响：where后的查找与order by 后的排序

索引[btree索引]：数据本身之外，数据库还维护着一个特定的查询算法的数据结构，这些数据以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法

查询快增删慢原因：
    改数据，还要改索引[索引指向]
索引本身也很大，不能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上 [linux df查看磁盘空间使用]

平常所说的索引：没有特别说明都是指B树[多路搜索树[不仅是二叉树，还有可能是三叉n叉]]
    唯一索引[主键]默认使用B+树---其他索引：聚集索引，次要索引，覆盖索引，前缀索引等
    除了B+树索引，还有哈希索引等


=================================  索引的优势劣势[查找/排序]：
    优势：
        提高数据检索效率，降低数据库的IO成本
        通过索引对数据进行排序，降低数据库的排序成本，降低CPU的消耗
    劣势：
        索引过多会占用大量磁盘空间
        提高了查询速度但是降低了更新速度[update/insert/delete][索引指向调整/新建]
        业务复杂需要花时间研究索引的建立/业务发生变化可能需要重建索引


=================================  索引分类
单值索引：一个索引只包含单个列，一个表可以有多个单列索引 [建议不要超过5个，同一时间只能加载一个索引]
唯一索引：索引列值得唯一，但允许空值
复合索引：一个索引包含多个列

语法：[]表示可以省略
    创建
        create [unique] index indexName on mytable(columnname(length))   #unique唯一索引
        alter table add [unique] index [indexname] on (colunmname(length))
    删除：drop index [indexname] on mytable
    查看：show index from tablename/G

=================================  mysql索引结构
bTree索引
Hash索引
full-text全文索引
R-Tree索引
