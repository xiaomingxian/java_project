300万左右性能开始下降
官方：索引是为了帮助mysql高效获取数据的数据结构  【排好序的快速查找数据结构】[排序+快速查找]
影响：where后的查找与order by 后的排序

索引[btree索引]：数据本身之外，数据库还维护着一个特定的查询算法的数据结构，这些数据以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法

查询快增删慢原因：
    改数据，还要改索引[索引指向]
索引本身也很大，不能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上 [linux df查看磁盘空间使用]

平常所说的索引：没有特别说明都是指B树[多路搜索树[不仅是二叉树，还有可能是三叉n叉]]
    唯一索引[主键]默认使用B+树---其他索引：聚集索引，次要索引，覆盖索引，前缀索引等
    除了B+树索引，还有哈希索引等


=================================  索引的优势劣势[查找/排序]：
    优势：
        提高数据检索效率，降低数据库的IO成本
        通过索引对数据进行排序，降低数据库的排序成本，降低CPU的消耗
    劣势：
        索引过多会占用大量磁盘空间
        提高了查询速度但是降低了更新速度[update/insert/delete][索引指向调整/新建]
        业务复杂需要花时间研究索引的建立/业务发生变化可能需要重建索引


=================================  索引分类
单值索引：一个索引只包含单个列，一个表可以有多个单列索引 [建议不要超过5个，同一时间只能加载一个索引]
唯一索引：索引列值得唯一，但允许空值
复合索引：一个索引包含多个列

语法：[]表示可以省略
    创建
        create [unique] index indexName on mytable(columnname(length))   #unique唯一索引
        alter table add [unique] index [indexname] on (colunmname(length))
    删除：drop index [indexname] on mytable
    查看：show index from tablename/G

=================================  mysql索引结构
bTree索引
    三层的b+[横向扩展，高度低，降低IO次数]树可以表示上百万的数据
Hash索引
full-text全文索引
R-Tree索引

=================================  创建索引的情况
索引的选择性：[数据的不重复]索引列中不同值的数目与表中记录的比值，比值越接近1[几乎没有重复，==1表示没有重复值]，这个索引的效率就越高
适用：
    主键自动建立唯一索引
    频繁查询的字段：eg:银行系统的身份证号，电信的手机号
    外键
    order by后的字段顺序与 where 后的字段顺序一致
    查询中统计或者分组[group by 前默认 order by]字段
不适合
    频繁更新的字段不适合建立索引
    where条件中用不到的字段
    表记录少
    数据列包含大量重复索引,为它建立索引就没有太大的实际效果
选择：
    单键/组合索引？[高并发下倾向于组合索引]

=================================  性能分析
MySql常见瓶颈：
    CPU:cpu在饱和的时候一般发生在数据装入内存或者从磁盘上读取数据的时候
    IO:磁盘IO瓶颈发生在装入数据远大于内存容量的时候
    服务器硬件性能瓶颈：top,free,iostat,vmstat查看系统的性能状态

执行计划(Explain)
    是什么：使用explain关键字可以模拟优化器执行sql,从而知道mysql是如何处理sql的，分析查询语句或者表结构的性能瓶颈
    作用：
        表的读取顺序
        数据读取操作的操作类型
        哪些索引可以使用
        哪些索引实际被使用
        表之间的引用
        每张表有多少行被优化器查询
    使用：explain+sql
    结果展示：id | select_type | table | type | possible_keys | key | key_len | ref | rows | filtered | extra
        id:查询的序列号，包含一组数字，表示查询中执行 select 子句或操作表的顺序
           值： id相同/不同/相同又不同