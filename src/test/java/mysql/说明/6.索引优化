尽可能减少join语句中的nestedLoop[嵌套循环]--永远小结果集驱动大结果集
优先优化messedLoop的内层循环
保证join语句中被驱动表上join条件已经被索引
当无法保证被驱动表的join条件字段被索引 且 内存充足的情况下，不要吝啬joinbuffer的设置[设置大]


1.范围会使该字段后的字段索引用不上  select a,b,c from t1 where a=1 and b>1 order by c desc #b>1会使 c 索引失效
    原因：BTree的工作原理 先排序a,如果遇到相同的再排序b,再遇到相同的再排c  因为b是一个范围，mysql无法利用索引对后面的c进行检索，即c的索引无效
    解决：删除原来三个字段的索引，仅为 a,b建立索引

2.左连接[索引放右表[左表全部展示，右表进行条件限制]] 右连接[同理]
    解决：交换表顺序 或者left/right交换


============================== 概念 ==============================
覆盖索引：https://www.cnblogs.com/happyflyingpig/p/7662881.html
    不是所有类型的索引都可以成为覆盖索引。覆盖索引必须要存储索引的列，而哈希索引、空间索引和全文索引等都不存储索引列的值，所以MySQL只能使用B-Tree索引做覆盖索引
============================== 索引优化 ==============================
1 全值匹配我最爱
2 最佳左前缀：查询从最左边开始[带头大哥不能死]，并且不跳过索引列[跳过会使后面的索引失效][中间兄弟不能断]
    多列索引：idx_name_age_add
        索引有效where：name;name,age;name,age,add
        索引失效where：age;age,add;age,name...[失去了带头大哥]
3 不在索引列上做任何操作 [计算,函数,(自动or手动)类型转换],会导致索引失效而转向全表扫描   #函数计算：explain select * from t where left(name,3)='tom'
4 存储引擎不能使用索引中范围条件右边的列？？  #select * from t where name='tom' and age>20 and pos='hr' #有效索引 name[检索],age[范围]；无效索引:pos
5 尽量使用覆盖索引 [只访问索引的查询(索引列和查询列一致)],减少select *
6 mysql在使用不等于(!=或者<>)的时候无法使用索引会导致全表扫描
7 is null,is not null 也无法使用索引
8 like以通配符开头(%abc...)mysql索引失效会变成全表扫描的操作   #like %xxx% ;like %xxx 的type为all 全表扫描  。like xxx% 的type 为 range
    mybatis中如何拼接like参数：where username LIKE concat(concat('%',#{username}),'%')
    like %xxx% 索引失效如何解决：使用覆盖索引[解释之一：如果一个索引包含了（或覆盖了）满足查询语句中字段与条件的数据就叫做覆盖索引(eg:复合索引覆盖了展示字段与条件字段)]
        select name,age from t where name like '%xxx%'  #索引:inx_name_age
        #反例：要查询的列或者条件的范围大与索引的字段范围 eg:select * from t where name like '%xxx%' #索引:inx_name_age
9 字符串不加单引号索引失效   #eg:age字段类型为varchar select * from t where age=20 #这里会涉及到类型的自动转换int->varchar[参考第三条]
x 少用or,用它来连接时索引会失效

