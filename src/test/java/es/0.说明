图解: https://blog.csdn.net/zl1zl2zl3/article/details/84799928


======================================= 说明:=======================================
http://localhost:9200/
{
  "name" : "pP2wAzl",//node名称
  "cluster_name" : "elasticsearch_xxm",  //集群名称
  "cluster_uuid" : "6s7UFSQQTwaTxekm5e3KVg",
  "version" : {
    "number" : "6.7.0", //版本号
    "build_flavor" : "oss",
    "build_type" : "tar",
    "build_hash" : "8453f77",
    "build_date" : "2019-03-21T15:32:29.844721Z",
    "build_snapshot" : false,
    "lucene_version" : "7.7.0",
    "minimum_wire_compatibility_version" : "5.6.0",
    "minimum_index_compatibility_version" : "5.0.0"
  },
  "tagline" : "You Know, for Search"
}
配置文件：elasticsearch.yml
======================================= elastic特点:=======================================

    [NRT]近实时:1-从写入数据到可以被搜索有一个延迟(大概1s)  ;2-基于es搜索和分析可以达到秒级
    集群节点[Cluster,Node]:
    shard[每个索引默认10个shard,5个primary shard(建立索引时一次设置默认5个不能修改),5个replica shard]  es规定shard与replica必须不在一个节点上[一般集群最少两台机器]
        shard[primary shrd][lunce index]:index[shard(分布在多个节点上-吞吐量横向扩展)] 参考图解
            假设一台机器的吞吐量是2000 shard在不同的node上 node又分布在不同的机器上 就达到了横向扩展的目的
        replica[replica shard] 确保每个shard都有副本信息replica--防止宕机数据丢失
            高可用:防止宕机数据丢失
            提升搜索操作的吞吐量和性能:提高每秒查询率[QPS] 查询shard与replica
    与mysql对比:
        index       库
        type        表
        document    行
    面向文档的数据结构:无论一个文档嵌套多少层 在es中是以一个documennt来表示 而不像mysql用关联关系来表示
======================================= kibanna
http://localhost:5601
Dev Tools
    检查集群健康状况：GET _search/health

========== es cat api
集群健康状态：GET _cat/health          [显示信息头] GET _cat/health?v
    green:每个索引的primary shard和replica shard都是active状态
    yellow:每个索引的primary shard都是active状态，但是部分replica shard不是active状态，处于不可用状态
    red : 不是所有的primary shard都是active状态，部分索引数据丢失了

    yellow原因：无集群状态下只有一个node 而primary shard与replica shard不能处于同一个节点上

查看所有索引：GET _cat/indices?v

创建索引：PUT /testindex?pretty

删除索引：DELETE /testindex?pretty

---------文档增删改查   es会为每个field建立倒排索引保证搜索
增：
    # PUT   /索引/type/id  {数据}
    PUT /product/dianzi/1
    {
      "name":"mac",
      "price":100000,
      "desc":["america","china"]
    }
查：GET /索引/type/id

改：
    替换操作 PUT   /索引/type/id  {所有数据}    版本号+1 "result":"updated" "created":false
    修改
         POST /product/dianzi/1/_update
         {
           "doc":{
             "name":"macbook"
           }
         }
删：DELETE /索引/type/id
------------------ 其他api
