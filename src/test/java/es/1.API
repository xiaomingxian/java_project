============================== GET /product/dianzi/_search
    {
      "took" : 24,//毫秒
      "timed_out" : false,//是否超时
      "_shards" : {
        "total" : 5,//将请求打到5个分片上[primary shard][或者是某个replica shard上]
        "successful" : 5,
        "skipped" : 0,
        "failed" : 0
      },
      "hits" : {
        "total" : 1,    //查询到的结果数量  1个document
        "max_score" : 1.0,  //相关度，匹配度越高分数越高
        "hits" : [      //搜索到的document详细数据
          {
            "_index" : "product",
            "_type" : "dianzi",
            "_id" : "1",
            "_score" : 1.0,
            "_source" : {
              "name" : "mac",
              "price" : 100000,
              "desc" : [
                "america",
                "china"
              ]
            }
          }
        ]
      }
    }

======================================= kibanna
http://localhost:5601
Dev Tools
    检查集群健康状况：GET _search/health

========== es cat api
集群健康状态：GET _cat/health          [显示信息头] GET _cat/health?v
    green:每个索引的primary shard和replica shard都是active状态
    yellow:每个索引的primary shard都是active状态，但是部分replica shard不是active状态，处于不可用状态
    red : 不是所有的primary shard都是active状态，部分索引数据丢失了

    yellow原因：无集群状态下只有一个node 而primary shard与replica shard不能处于同一个节点上

查看所有索引：GET _cat/indices?v

创建索引：PUT /testindex?pretty

删除索引：DELETE /testindex?pretty

---------文档增删改查   es会为每个field建立倒排索引保证搜索
增：
    # PUT   /索引/type/id  {数据}
    PUT /product/dianzi/1
    {
      "name":"mac",
      "price":100000,
      "desc":["america","china"]
    }
查：GET /索引/type/id

改：
    替换操作 PUT   /索引/type/id  {所有数据}    版本号+1 "result":"updated" "created":false
    修改
         POST /product/dianzi/1/_update
         {
           "doc":{
             "name":"macbook"
           }
         }
删：DELETE /索引/type/id

======================= 多种搜索方式[6种]
==类型
1 query string search
        GET product/dianzi/_search?q=name:iphone
        GET product/dianzi/_search?sort=price:desc
2 query DSL[es领域的特定语言]
        -------------匹配所有
        GET product/dianzi/_search
        {
          "query":{
            "match_all": {}
          }
        }
        -------------匹配
        GET product/dianzi/_search
        {
          "query":{
            "match": {//match得拼接条件
              "name":"mac"
            }
          }
        }
        -----------排序
        GET /product/dianzi/_search
        {
          "query":{
            "match_all":{}

          },
           "sort":[{"price":"desc"}]
        }
        -----------查询指定字段，分页
        GET /product/dianzi/_search
        {
          "query":{
            "match_all": {}

          },
           "_source":["name","desc"],
          "from":0,
          "size":1
        }


3 query filter
         ------------条件过滤
            GET /product/dianzi/_search
            {
              "query":{
                "bool":{//封装多种查询条件
                  "must":{//必须
                    "match":{"name":"mac"}
                  },
                  "filter": {
                    "range": {
                      "price": {//字段Field
                        "gte": 10,
                        "lte": 200000
                      }
                    }
                  }
                }
              }
            }
4 full-text search[全文检索]
        GET /product/dianzi/_search
        {
          "query":{
            "match":{
              "name":"mac book"//mac 和 book 会被拆解进行倒排索引式的搜索  谁得的分数高谁就排在前面
            }
          }
        }
        倒排索引
        字段分割  文档id
        mac     1 2
        pro     2

5 parse search
        GET /product/dianzi/_search
        {
          "query":{
            "match_phrase":{
              "name":"mac"//包含就返回
            }
          }
        }
6 highlight search

        GET /product/dianzi/_search
        {
          "query":{
            "match_phrase":{
              "name":"mac"
            }

          }
        ,"highlight":{
          "fields": {
            "price":{}
          }
        }
        }

==============聚合
    ---聚合查询之前设置[聚合查询会把各个分片上的数据加载到堆空间-会消耗大量内存-es默认关闭-用以下操作开启]
    PUT /product/_mapping/dianzi
    {
      "properties": {
        "name": {
          "type":     "text",
          "fielddata": true
        }
      }
    }
    ---聚合操作
    GET /product/dianzi/_search
    {
    "aggs": {
      "NAME": {
        "AGG_TYPE": {}
      }
    }
    }
    eg分组聚合:
        GET /product/dianzi/_search
        {
         "aggs": {//聚合
           "my_juhe":{//自定义名称
             "terms": {//
               "field": "name",
               "size": 10
             }
           }
         }
        }
    ----聚合查询
        GET /product/dianzi/_search
        {
          "query": {
            "match": {
              "name": "mac"
            }
          },
         "aggs": {
           "my_juhe":{
             "terms": {
               "field": "name",
               "size": 10
             }
           }
         }
        }
    ----先分组再求平均数
        GET /product/dianzi/_search
        {
          "size":0,
          "aggs": {
            "my_group": {
              "terms": {
                "field": "name"
              },
              "aggs": {
                "my_price": {
                  "avg": {
                    "field": "price"
                  }
                }
              }
            }
          }
        }
    ----先范围-再分组--再平均
        GET /product/dianzi/_search
        {
          "size":0,
          "aggs": {
            "my_range": {
              "range": {
                "field": "price",
                "ranges": [
                  {
                    "from": 3000,
                    "to": 200000
                  }
                ]
              },
              "aggs": {
                "my_term": {
                  "terms": {
                    "field": "name"
                  }
                  ,"aggs": {
                    "my_avg": {
                      "avg": {
                        "field": "price"
                      }
                    }
                  }
                }
              }
            }
          }
        }
=======================批量查询mget
===重要性：一次性查询多条数据可以尽量减少网络开销，提升性能
    GET /_mget
    {
      "docs":[
      {
        "_index":"bingfa",
        "_type":"bf",
        "_id":1
      },
       {
        "_index":"product",
        "_type":"dianzi",
        "_id":1
      }
      ]
    }
    -----同一个索引下的数据
        GET /product/_mget
        {
          "docs":[
            {
              "_type":"dianzi","_id":1
            },
            {
              "_type":"dianzi","_id":2
            }
            ]
        }
    -------同一个type下的数据
        GET /product/dianzi/_mget
        {
          "ids":[1,2,3]
        }
========================bulk语法