===============================  多态   ======================================
编译时间多态性(或静态多态性)
    在编译器时间内解析的多态性称为静态多态性。
    方法重载是编译时多态的一个例子。
    方法重载：如果方法的参数在参数的数量，顺序和数据类型上不同，则允许我们具有多个具有相同名称的方法。
    我们在之前的教程已经讨论了方法重载

运行时多态性(或动态多态性)
    它也称为动态方法调度。
    动态多态性是一个在运行时解析对重写方法的调用的过程，这就是为什么它被称为运行时多态。

=============================================================================
***** 多看，价值大 ：https://blog.csdn.net/qq_34755766/article/details/82981208
String 为什么不可变
    安全角度：
        final的出现就是为了为了不想改变
        final 修饰的类是不被能继承的，所以 final 修饰的类是不能被篡改的（因为不可能有子类了嘛）
    从效率上讲：
        设计成final，JVM才不用对相关方法在虚函数表中查询，而直接定位到String类的相关方法上，提高了执行效率 这点对提高效率特别重要
        Java设计者认为共享带来的效率更高（比如常量池、线程池都是这个概念）