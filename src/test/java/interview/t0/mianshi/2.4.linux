整机:top/uptime[简化版]
    %CPU %MEM[内存]  loadaverage  x x x[系统的负载均衡-有三个值分别表示系统 1/5/15min的负载值] 如果三个值相加*100% 超过60%说明负载重
CPU:vmstat  进程/CPU[等]
    vmstat -n 2 3
    一般vmstat是通过两个数字参数来完成的，第一个参数是采样的时间间隔数单位是秒，第二个参数是采样的次数
    procs:
        r:运行和等待CPU时间片的进程数，原则上一核的CPU的运行队列不要超过2，整个系统的运行队列不能超过总核数的2倍，否则代表系统压力过大
        b:等待资源的进程数，比如正在等待磁盘I/O,网络I/O等
    cpu:
        us:用户进程消耗CPU时间百分比，us值越高，用户进程消耗CPU时间多，如果长期大于50%，优化程序
        sy:内核进程消耗CPU时间百分比
        us+sy参考值为 80%,如果大于 80%，说明可能存在CPU不足
        id[idle]:CPU空闲率[越高越好]
       更细粒度的信息： mpstat -P ALL 2
       每个进程使用cpu的用量分解信息： pidstat -u 1 -p 进程编号
        eg:pidstat -p 5101[进程号] -r 2[采样间隔秒数]

内存:free   free -g[单位是g]  free -m[单位是m]/pidstat -d 取样间隔 -p 进程号

==================== 以上3点常用
硬盘:df   df/h[human 人类语言∂]
磁盘IO:iostat   iostat -xdk 2 3[2s取一次共取3次]
网络IO:ifstat

==================== 生产环境CPU占用过高
1 先使用top命令找到cpu占比最高的
    top 查看cpu使用情况 内存
2 ps/jps 进一步定位 得知是怎样的一个后台进程
    ps ef /jps [根据进程号查]
3 定位到具体线程或代码
    ps -mp 进程号 -o THREAD,tid,time
4 将需要线程id转换成16进制[英文小写]
    参数解释：-m显示所有的线程  -p pid进程适应cpu时间 -o这之后是用户自定义格式
5 jstack 进程号 |grep tid(16进制线程id) -A60[前多少行]
