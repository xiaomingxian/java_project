
JMM(java 内存模型)
JMM编程特性：
    可见性
    原子性
    有序性

num++ 是三部操作 读 改变 赋值

由于jvm运行的实体是线程，而每个线程创建时jvm都会为其创建一个工作内存[有些地方叫栈内存]，工作内存是每个线程私有的数据区域
而java内存模型中规定所有的变量都存在主内存，主内存是内存共享区域，所有线程都可以访问，
但线程对变量的操作是在工作内存中进行，首先要将变量从主内存中拷贝到自己的内存空间，
    然后对变量进行操作，操作完成后再将变量写会主内存，不能直接操作主内存中的变量，各个线程中的工作内存存储的是主内存中边变量副本的拷贝、
    因此不同的线程无法访问其他线程的工作内存，线程间的通信必须通过主内存来完成


volatile[轻量级同步机制]
    保证可见性
    不保证原子性   参照：jvm/pic/15.图解volatile的非原子性.jpg  cpu进行线程调度，快于内存复制，所以可能出现先赋值的操作,快于先从 =====》解决：Automicxxx-->原理CAS-->Cas原理：
    禁止指令重排[保证了有序]
 demo:单例模式的双重检索机制 指令重排的解决；缓存元素 原因：缓存更新必须及时通知

AntomicXXX原理：UnSafe+CAS[比较并交换直至比较成功][自旋]

================ CAS  ================
CAS[比较交换]   根据内存地址[内存偏移量]获取对象   CAS是CPU原子指令，不会造成所谓的数据不一致
    CAS 是Automicxxx的底层实现 它的方法都是native 最终都是用汇编语言对地址值进行操作[jvm帮助实现汇编指令]--->最终调用的是CPU的原子性指令
    1 Unsafe[位置：jvm运行jar包 rt.jar中]
        是CAS的核心类，由于java无法直接访问底层系统，需要通过本地(native)方法来访问[java对native无能为力]
        Unsafe相当于一个后门，基于该类可以直接操作特定内存的数据，Unsafe存在于sun.misc包中，其内部方法可以像c的指针一样直接操作内存，因为java中CAS的操作依赖与Unsafe类的方法
        注意：Usafe中的所有方法都是native修饰的，也就是说Unsafe中的方法直接调用系统底层资源来执行相应任务
        jvm会帮助我们实现CAS方法中的汇编指令
缺点：
    1 如果CAS一直不成功----->自旋事件过长，CPU开销大
    2 只能保证一个共享变量的原子操作，加锁可以保证一段代码的原子性
    3 ABA问题 中间过程不受监管 只管头尾


解决方案：
    时间戳:
    版本号:
悲观锁和乐观锁
    独占锁：是一种悲观锁，synchronized就是一种独占锁，会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁。
    乐观锁：每次不加锁，假设没有冲突去完成某项操作，如果因为冲突失败就重试，直到成功为止。

================== ArrayList 线程不安全分析 位置： interview.t0.mianshi.test.T4_ArrayListCurrentXiuGaiExc  =============
================== HashSet 线程不安全分析 位置： interview.t0.mianshi.test.T4_ArrayListCurrentXiuGaiExc  =============
java在方法传递参数时，是将变量复制一份，然后传入方法体去执行。
    此处区分封装类型与String
    封装类型：原引用与被拷贝的引用地址值不同但是值指向的地址相同 改变是在改变 值
    String 拷贝之后 值发生改变 是指向了新的地址值 与拷贝前的执行不同

公平锁非公平锁：先来后到
可重入锁(递归锁)：
    指的是同一个线程外层函数获取到锁之后，内层函数仍能获取该锁的代码---->线程可以进入任何一个它已经拥有的锁所同步的代码块
    ReentrantLock/Syschronized是典型的可重入锁
    最大作用：避免死锁

自旋锁：指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，好处：减少上下文切换的消耗；缺点：循环会消耗CPU   demo:interview.t0.mianshi.test.T6_ZiXuanSuo

读写锁：多个线程可以同时读一个资源类，不能同时写
        总结：读-读 可共存 ；读-写 不能共存 ；写-写 不能共存
        写操作的要求：原子+独占
        demo:模拟缓存操作 -->interview.t0.mianshi.test.T7_ReadWriteLock